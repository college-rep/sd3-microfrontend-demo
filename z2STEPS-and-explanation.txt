



ng new host-app --routing --style=scss
cd host-app

Install necessary dependencies for module federation:

------Angular's Module Federation, introduced in Webpack 5, 
------allows you to load microfrontends dynamically. 
------We'll use this for our microfrontend architecture.
------Install the Webpack module federation and related packages:

npm install @angular-architects/module-federation --save-dev


------Add Webpack configuration for module federation:


------create webpack.config.js
const { ModuleFederationPlugin } = require('webpack').container;
const path = require('path');

module.exports = {
  output: {
    publicPath: 'auto',
  },
  plugins: [
    new ModuleFederationPlugin({
      name: 'hostApp',
      remotes: {
        // We'll add remote microfrontends here
        // Example: 'remoteApp': 'remoteApp@http://localhost:4201/remoteEntry.js',
      },
    }),
  ],
};


------Inside the build options for your host application, "angular.json"
------add the webpackConfig option pointing to your custom Webpack configuration
##instead of "builder": "@angular-devkit/build-angular:application",

"builder": "@angular-devkit/build-angular:application",
"options": {
  "webpackConfig": "./webpack.config.js",
  ...
}

------------------------------------------------------
------------------------------------------------------
---------2--SET UP microfrontend application-----------
------------------------------------------------------
------------------------------------------------------

ng new microfrontend-app --routing --style=scss
cd microfrontend-app
npm install @angular-architects/module-federation --save-dev


##instead of "builder": "@angular-devkit/build-angular:application",
------angular.json
"builder": "@angular-devkit/build-angular:application",
"options": {
  "webpackConfig": "./webpack.config.js",
  ...
}

------------------------------------------------------
------------------------------------------------------
---------3--Integrating the Microfrontend into the Host Application-----------
------------------------------------------------------
------------------------------------------------------


-----1-Update the Host App: in webpack.config.js
remotes: {
  'microfrontendApp': 'microfrontendApp@http://localhost:4201/remoteEntry.js',
},



-----2-Dynamically Load Microfrontend Components:
------In your host application, you'll now load the component exposed 
------by the microfrontend dynamically. You can achieve this by using 
------Angular's loadRemoteModule function, provided by @angular-architects/module-federation.

-------in host-app app.component.this
import { Component } from '@angular/core';
import { loadRemoteModule } from '@angular-architects/module-federation';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent {
  title = 'hostApp';
  remoteComponent: any;

  constructor() {
    loadRemoteModule({
      remoteEntry: 'http://localhost:4201/remoteEntry.js',
      remoteName: 'microfrontendApp',
      exposedModule: './FeatureComponent',
    }).then((m) => {
      this.remoteComponent = m.FeatureComponent;
    });
  }
}

------
------
------

------------------------------------------------------
------------------------------------------------------
---------3--Integrating the Microfrontend into the Host Application-----------
------------------------------------------------------
------------------------------------------------------